import "core-js/stable";
import "regenerator-runtime/runtime";
import { waitForAppScreen, zemu, genericTx, nano_models,SPECULOS_ADDRESS, txFromEtherscan} from './test.fixture';
import { ethers } from "ethers";
import { parseEther, parseUnits} from "ethers/lib/utils";

// EDIT THIS: Replace with your contract address
// const contractAddr = "0x7251febeabb01ec9de53ece7a96f1c951f886dd2"
// EDIT THIS: Replace `boilerplate` with your plugin name
// const pluginName = "OKX";
// const testNetwork = "ethereum";
// const abi_path = `../networks/${testNetwork}/${pluginName}/abis/` + contractAddr + '.json';
// const abi = require(abi_path);

// Earn stake
// nano_models.forEach(function(model) {
//   jest.setTimeout(20000)
//   test('[Nano ' + model.letter + '] Earn stake', zemu(model, async (sim, eth) => {

//   const serializedTx = txFromEtherscan("0x02f903ba0163841dcd65008504e01f0b00830fd609947251febeabb01ec9de53ece7a96f1c951f886dd2880787e791ba93a196b90344016cba5f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000000000000000000000000000000dd55851981c00000000000000000000000000008aaa31c97bced73acd8bc0d5c0c866db6eb6b424000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000787e791ba93a1960000000000000000000000008aaa31c97bced73acd8bc0d5c0c866db6eb6b4240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008aaa31c97bced73acd8bc0d5c0c866db6eb6b42400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000104c41a3be8000000000000000000000000e8c6c9227491c0a8156a0106a0204d881bb7e5310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f8d0872307130ac509c4dbd4db83537bd2aadd0c0000000000000000000000000000000000000000000000008701097dabee6f3300000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe7dcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40c00000000000000000000000000000000000000000000000000000000c080a0f8be0bddcf95e1389dd5e1269e5d8e617c6c9cef10cbed5a67f1c761c4bc4a1fa01a0c773afb01e375e0972e902b457efc4e5607a130bf8e32573d7a2b5ac5274f")

//   const tx = eth.signTransaction(
//     "44'/60'/0'/0",
//     serializedTx,
//   );

//   const right_clicks = model.letter === 'S' ? 12 : 6;

//   // Wait for the application to actually load and parse the transaction
//   await waitForAppScreen(sim);

//   await new Promise(r => setTimeout(r, 200000));

//   // Navigate the display by pressing the right button `right_clicks` times, then pressing both buttons to accept the transaction.
// //   await sim.navigateAndCompareSnapshots('.', model.name + '_swap_exact_eth_for_tokens_with_beneficiary', [right_clicks, 0]);

// //   await tx;
//   }));
// });
